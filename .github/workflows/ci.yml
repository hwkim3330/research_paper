name: CBS Research CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly run on Mondays at 2 AM UTC

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Code quality and linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pylint isort
        pip install -r requirements.txt
        
    - name: Run Black code formatter check
      run: |
        black --check --diff src/ tests/
        
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Run Flake8 linting
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503,E501
        
    - name: Run MyPy type checking
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run Pylint analysis
      run: |
        pylint src/ --disable=C0103,R0903,R0913,C0301,W0613 --exit-zero

  # Unit and integration tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tcpdump iperf3 vlc-bin-base
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-timeout pytest-mock
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing --timeout=300
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Performance benchmarking
  performance:
    name: Performance Benchmarking  
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run CBS calculation benchmarks
      run: |
        cd src
        python performance_benchmark.py --test calculation --iterations 5 --duration 30
        
    - name: Run optimization benchmarks
      run: |
        cd src  
        python performance_benchmark.py --test optimization --iterations 3 --duration 20
        
    - name: Run scalability benchmarks
      run: |
        cd src
        python performance_benchmark.py --test scalability --iterations 3 --duration 20
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: src/benchmark_results/
        retention-days: 30

  # Documentation generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -r requirements.txt
        
    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        sphinx-apidoc -f -o docs/api src/
        
    - name: Build Sphinx documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 30

  # Data analysis and visualization
  analysis:
    name: Data Analysis & Visualization
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run data analysis
      run: |
        cd src
        python data_analyzer.py --data ../results/experiment_data.json --output analysis_results
        
    - name: Generate CBS performance reports
      run: |
        cd src
        python cbs_calculator.py > cbs_example_output.log 2>&1 || true
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v3
      with:
        name: analysis-results
        path: src/analysis_results/
        retention-days: 30

  # LaTeX paper compilation
  latex:
    name: Compile LaTeX Papers
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-full
        
    - name: Compile Korean paper
      run: |
        cd .
        pdflatex -interaction=nonstopmode paper_korean_final.tex || true
        bibtex paper_korean_final || true
        pdflatex -interaction=nonstopmode paper_korean_final.tex || true
        pdflatex -interaction=nonstopmode paper_korean_final.tex || true
        
    - name: Compile English paper
      run: |
        cd .
        pdflatex -interaction=nonstopmode paper_english_final.tex || true  
        bibtex paper_english_final || true
        pdflatex -interaction=nonstopmode paper_english_final.tex || true
        pdflatex -interaction=nonstopmode paper_english_final.tex || true
        
    - name: Upload compiled papers
      uses: actions/upload-artifact@v3
      with:
        name: compiled-papers
        path: |
          paper_korean_final.pdf
          paper_english_final.pdf
        retention-days: 90

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
        
    - name: Run Bandit security linting
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true
        
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Docker image build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t cbs-research:latest -f docker/Dockerfile .
        
    - name: Test Docker image
      run: |
        docker run --rm cbs-research:latest python -c "from src.cbs_calculator import CBSCalculator; print('CBS Calculator imported successfully')"
        docker run --rm cbs-research:latest python -m pytest tests/ -v --tb=short --timeout=60
        
    - name: Log in to Docker Hub (only on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Push to Docker Hub (only on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        docker tag cbs-research:latest ${{ secrets.DOCKERHUB_USERNAME }}/cbs-research:latest
        docker tag cbs-research:latest ${{ secrets.DOCKERHUB_USERNAME }}/cbs-research:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/cbs-research:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/cbs-research:${{ github.sha }}

  # Deployment and release
  deploy:
    name: Deploy & Release
    runs-on: ubuntu-latest
    needs: [code-quality, test, performance, documentation, latex, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog generation
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release directory
      run: |
        mkdir -p release/
        cp -r benchmark-results/ release/ 2>/dev/null || true
        cp -r analysis-results/ release/ 2>/dev/null || true  
        cp -r documentation/ release/ 2>/dev/null || true
        cp -r compiled-papers/ release/ 2>/dev/null || true
        
    - name: Generate changelog
      run: |
        echo "# Release $(date +%Y%m%d-%H%M%S)" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Changes" >> CHANGELOG.md
        git log --oneline --since="1 week ago" >> CHANGELOG.md || true
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          release/**/*
          CHANGELOG.md
        name: CBS Research Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: documentation/
        destination_dir: docs
        
    - name: Update project statistics
      run: |
        echo "# Project Statistics" > PROJECT_STATS.md
        echo "Generated on: $(date)" >> PROJECT_STATS.md
        echo "" >> PROJECT_STATS.md
        echo "## Code Statistics" >> PROJECT_STATS.md
        find src/ -name "*.py" -exec wc -l {} + | tail -n 1 | awk '{print "Python lines: " $1}' >> PROJECT_STATS.md
        find tests/ -name "*.py" -exec wc -l {} + | tail -n 1 | awk '{print "Test lines: " $1}' >> PROJECT_STATS.md
        echo "" >> PROJECT_STATS.md
        echo "## Test Coverage" >> PROJECT_STATS.md
        echo "Latest test run completed successfully" >> PROJECT_STATS.md

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "🎉 CBS Research CI/CD Pipeline completed successfully!"
        echo "✅ All tests passed"
        echo "📊 Performance benchmarks completed" 
        echo "📚 Documentation generated"
        echo "🚀 Deployment successful"
        
    - name: Notify on failure
      if: ${{ needs.deploy.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "❌ CBS Research CI/CD Pipeline failed!"
        echo "Please check the failed jobs and fix the issues."
        echo "Failed jobs: ${{ toJSON(needs.*.result) }}"